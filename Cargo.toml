[package]
name = "phaeton"
version = "0.14.0"
edition = "2024"
description = "Phaeton - EV Charger Driver for Victron Venus OS"
authors = ["Your Name <your.email@example.com>"]
license = "MIT OR Apache-2.0"
keywords = ["ev", "charger", "modbus", "victron", "venus"]
categories = ["embedded", "api-bindings"]
repository = "https://github.com/rhernaus/phaeton"
readme = "README.md"

[dependencies]
# Async runtime (trimmed features)
tokio = { version = "1", features = ["macros", "rt-multi-thread", "sync", "time", "net", "fs"] }
tokio-stream = { version = "0.1", features = ["sync"] }

# Modbus TCP client
tokio-modbus = { version = "0.16.1", features = ["tcp"] }

# Web framework
axum = { version = "0.8", features = ["json", "tokio"] }
tower-http = { version = "0.6", default-features = false, features = ["cors", "trace", "fs", "set-header"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_yaml = "0.9"
serde_json = "1.0"
schemars = { version = "1.0.4", optional = true }
utoipa = { version = "5.4.0", optional = true, default-features = false, features = ["axum_extras", "chrono", "uuid"] }
utoipa-swagger-ui = { version = "9.0.2", optional = true, default-features = false, features = ["axum"] }

# (external) configuration crate not used; our config is local module

# Logging and tracing
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }
tracing-appender = "0.2"

# D-Bus integration for Venus OS
zbus = { version = "5.10", default-features = false, features = ["tokio"] }

# HTTP client for external APIs (Rustls only)
reqwest = { version = "0.12", optional = true, default-features = false, features = ["json", "rustls-tls"] }
pulldown-cmark = { version = "0.13", optional = true }
ammonia = { version = "4.0", optional = true }
tar = { version = "0.4", optional = true }
flate2 = { version = "1", optional = true, default-features = false, features = ["rust_backend"] }

# Date and time handling
chrono = { version = "0.4", features = ["serde"] }
chrono-tz = "0.10"

# Error handling
thiserror = "2.0"
anyhow = "1.0"

# Utilities
uuid = { version = "1.0", features = ["v4", "serde"] }
async-trait = "0.1"
once_cell = "1.19"

# File system and persistence
# (no external helpers needed)


# Environment and process management (not used)

# Cryptography (not used)

# Development dependencies
[dev-dependencies]
tempfile = "3.0"
tower = "0.5"
http-body-util = "0.1"

# Performance benchmarking
# [[bench]]
# name = "modbus_benchmark"
# harness = false

# Build configuration
[profile.release]
opt-level = 3
debug = false
strip = true
lto = true
codegen-units = 1
panic = "abort"

[profile.dev]
opt-level = 0
debug = true

# Cross-compilation target for Venus OS (ARM)
[package.metadata.cross]
targets = ["armv7-unknown-linux-gnueabihf"]

# Metadata for packaging
[package.metadata.deb]
name = "phaeton"
maintainer = "Your Name <your.email@example.com>"
copyright = "2024, Your Organization"
license-file = ["LICENSE", "0"]
depends = "libc6 (>= 2.15)"
section = "admin"
priority = "optional"
assets = [
    ["target/release/phaeton", "usr/bin/phaeton", "755"],
    ["README.md", "usr/share/doc/phaeton/README.md", "644"],
    ["docs/*", "usr/share/doc/phaeton/", "644"],
]

[workspace.lints.rust]
unsafe_code = "forbid"
unused = { level = "deny", priority = -1 }
rust_2018_idioms = { level = "deny", priority = -1 }

[workspace.lints.clippy]
all = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
dbg_macro = "deny"
unwrap_used = "deny"
expect_used = "deny"

[features]
default = ["web", "dbus", "updater"]

# Toggle API server
web = []

# Toggle D-Bus integration
dbus = []

# Serve OpenAPI and generate schema
openapi = ["dep:utoipa", "dep:utoipa-swagger-ui", "dep:schemars"]

# Enable Tibber integration HTTP client
tibber = ["dep:reqwest"]

# Enable self-updater HTTP client and release notes rendering
# Also include tar.gz extraction support to install full release packages
updater = ["dep:reqwest", "dep:pulldown-cmark", "dep:ammonia", "dep:tar", "dep:flate2"]

# Optional compression features for tower-http
compression = ["tower-http/compression-br", "tower-http/compression-gzip"]

# Convenience to enable everything
full = ["web", "dbus", "openapi", "tibber", "compression"]
