name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    name: Build Linux (armv7, aarch64, x86_64)
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.version.outputs.app_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross toolchains and build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu gcc \
            libc6-dev-armhf-cross libc6-dev-arm64-cross \
            pkg-config cmake make perl build-essential ca-certificates

      - name: Add Rust targets
        run: |
          rustup target add armv7-unknown-linux-gnueabihf
          rustup target add aarch64-unknown-linux-gnu
          rustup target add x86_64-unknown-linux-gnu

      - name: Build (armv7)
        env:
          CC_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-gcc
          AR_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-ar
          RANLIB_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-ranlib
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
          PKG_CONFIG_ALLOW_CROSS: "1"
        run: |
          cargo build --target armv7-unknown-linux-gnueabihf --release --verbose

      - name: Build (aarch64)
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
          RANLIB_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ranlib
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          PKG_CONFIG_ALLOW_CROSS: "1"
        run: |
          cargo build --target aarch64-unknown-linux-gnu --release --verbose

      - name: Build (x86_64)
        run: |
          cargo build --target x86_64-unknown-linux-gnu --release --verbose

      - name: Compute application version
        id: version
        run: |
          APP_VERSION=$(grep -m1 '^version\s*=\s*"' Cargo.toml | sed -E 's/.*"([^"]+)".*/\1/')
          echo "app_version=$APP_VERSION" >> "$GITHUB_OUTPUT"

      - name: Package artifacts
        run: |
          mkdir -p dist
          APP_VERSION="${{ steps.version.outputs.app_version }}"
          tar -czf dist/phaeton-${APP_VERSION}-armv7-unknown-linux-gnueabihf.tar.gz -C target/armv7-unknown-linux-gnueabihf/release phaeton
          tar -czf dist/phaeton-${APP_VERSION}-aarch64-unknown-linux-gnu.tar.gz -C target/aarch64-unknown-linux-gnu/release phaeton
          tar -czf dist/phaeton-${APP_VERSION}-x86_64-unknown-linux-gnu.tar.gz -C target/x86_64-unknown-linux-gnu/release phaeton

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: dist/*.tar.gz



  publish:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: [build-linux]
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries
          path: dist

      - name: Generate checksums
        run: |
          cd dist
          sha256sum *.tar.gz > SHA256SUMS
          cat SHA256SUMS

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-linux.outputs.app_version }}
          files: |
            dist/phaeton-${{ needs.build-linux.outputs.app_version }}-armv7-unknown-linux-gnueabihf.tar.gz
            dist/phaeton-${{ needs.build-linux.outputs.app_version }}-aarch64-unknown-linux-gnu.tar.gz
            dist/phaeton-${{ needs.build-linux.outputs.app_version }}-x86_64-unknown-linux-gnu.tar.gz
            dist/SHA256SUMS
          generate_release_notes: true
          prerelease: ${{ contains(needs.build-linux.outputs.app_version, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


