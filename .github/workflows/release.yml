name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare:
    name: Compute application version
    runs-on: ubuntu-24.04
    outputs:
      app_version: ${{ steps.version.outputs.app_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Compute application version
        id: version
        run: |
          APP_VERSION=$(grep -m1 '^version\s*=\s*"' Cargo.toml | sed -E 's/.*"([^"]+)".*/\1/')
          echo "app_version=$APP_VERSION" >> "$GITHUB_OUTPUT"

  build-linux:
    name: Cross-compilation (${{ matrix.target }}, ${{ matrix.friendly }}, ${{ matrix.gcc_pkg }}, ${{ matrix.apt_arch }})
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: armv7-unknown-linux-gnueabihf
            apt_arch: armhf
            gcc_pkg: gcc-arm-linux-gnueabihf
            gcc_triplet: arm-linux-gnueabihf-gcc
            pkgconfig: /usr/lib/arm-linux-gnueabihf/pkgconfig
            friendly: Cerbo GX (ARM v7)
            tool_prefix: arm-linux-gnueabihf
          - target: aarch64-unknown-linux-gnu
            apt_arch: arm64
            gcc_pkg: gcc-aarch64-linux-gnu
            gcc_triplet: aarch64-linux-gnu-gcc
            pkgconfig: /usr/lib/aarch64-linux-gnu/pkgconfig
            friendly: Linux ARM64
            tool_prefix: aarch64-linux-gnu
          - target: x86_64-unknown-linux-gnu
            apt_arch: amd64
            gcc_pkg: gcc
            gcc_triplet: gcc
            pkgconfig: /usr/lib/x86_64-linux-gnu/pkgconfig
            friendly: Linux AMD64
            tool_prefix: x86_64-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-cross-compilation-${{ matrix.target }}

      - name: Install cross-compilation tools
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -euxo pipefail
          sudo apt-get update -o Acquire::Retries=3
          sudo apt-get install -y --no-install-recommends \
            ${{ matrix.gcc_pkg }} \
            pkg-config \
            cmake \
            make \
            perl \
            libc6-dev-armhf-cross \
            libc6-dev-arm64-cross \
            ca-certificates

      - name: Configure cross env
        shell: bash
        run: |
          set -euxo pipefail
          TARGET_UC=$(echo "${{ matrix.target }}" | tr '[:lower:]-' '[:upper:]_')
          echo "CARGO_TARGET_${TARGET_UC}_LINKER=${{ matrix.tool_prefix }}-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_${TARGET_UC}_AR=${{ matrix.tool_prefix }}-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_${TARGET_UC}_RANLIB=${{ matrix.tool_prefix }}-ranlib" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${{ matrix.pkgconfig }}" >> $GITHUB_ENV

      - name: Build (release)
        run: cargo build --target ${{ matrix.target }} --release --locked --verbose

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: phaeton-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/phaeton

  publish:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-24.04
    needs: [build-linux, prepare]
    steps:
      - name: Download compiled binaries
        uses: actions/download-artifact@v5
        with:
          pattern: phaeton-*
          path: artifacts
          merge-multiple: false

      - name: Checkout repository for packaging assets
        uses: actions/checkout@v5

      - name: Package artifacts
        run: |
          set -euxo pipefail
          mkdir -p dist

      - name: Package (armv7-unknown-linux-gnueabihf)
        uses: ./.github/actions/package-tarball
        with:
          target: armv7-unknown-linux-gnueabihf
          tag: ${{ needs.prepare.outputs.app_version }}
          binary_path: artifacts/phaeton-armv7-unknown-linux-gnueabihf/phaeton
          config_path: phaeton_config.sample.yaml
          webui_dir: webui
          dest_dir: dist

      - name: Package (aarch64-unknown-linux-gnu)
        uses: ./.github/actions/package-tarball
        with:
          target: aarch64-unknown-linux-gnu
          tag: ${{ needs.prepare.outputs.app_version }}
          binary_path: artifacts/phaeton-aarch64-unknown-linux-gnu/phaeton
          config_path: phaeton_config.sample.yaml
          webui_dir: webui
          dest_dir: dist

      - name: Package (x86_64-unknown-linux-gnu)
        uses: ./.github/actions/package-tarball
        with:
          target: x86_64-unknown-linux-gnu
          tag: ${{ needs.prepare.outputs.app_version }}
          binary_path: artifacts/phaeton-x86_64-unknown-linux-gnu/phaeton
          config_path: phaeton_config.sample.yaml
          webui_dir: webui
          dest_dir: dist
      - name: Generate checksums
        run: |
          cd dist
          sha256sum *.tar.gz > SHA256SUMS
          cat SHA256SUMS

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare.outputs.app_version }}
          files: |
            dist/phaeton-${{ needs.prepare.outputs.app_version }}-armv7-unknown-linux-gnueabihf.tar.gz
            dist/phaeton-${{ needs.prepare.outputs.app_version }}-aarch64-unknown-linux-gnu.tar.gz
            dist/phaeton-${{ needs.prepare.outputs.app_version }}-x86_64-unknown-linux-gnu.tar.gz
            dist/SHA256SUMS
          generate_release_notes: true
          prerelease: ${{ contains(needs.prepare.outputs.app_version, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


