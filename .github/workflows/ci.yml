name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy linter
      run: cargo clippy -- -D warnings

    - name: Build project
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests with all features
      run: cargo test --all-features --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  cross-compilation:
    name: Cross-compilation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - { name: "Cerbo GX (ARM v7)", triple: "armv7-unknown-linux-gnueabihf", gcc: "gcc-arm-linux-gnueabihf" }
          - { name: "Linux ARM64", triple: "aarch64-unknown-linux-gnu", gcc: "gcc-aarch64-linux-gnu" }
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target.triple }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cross-compilation tools
      run: |
        # Install basic cross-compilation tools first
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.target.gcc }}

        # For ARM targets, install additional cross-compilation packages
        if [ "${{ matrix.target.triple }}" = "armv7-unknown-linux-gnueabihf" ]; then
          # Install ARM cross-compilation toolchain
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

          # Install cross-architecture packages (add architecture support if needed)
          sudo dpkg --add-architecture armhf || true
          sudo apt-get update

          # Try to install cross-architecture packages, fallback if not available
          sudo apt-get install -y libssl-dev:armhf || echo "libssl-dev:armhf not available, using native"
          sudo apt-get install -y pkg-config-arm-linux-gnueabihf || echo "pkg-config-arm-linux-gnueabihf not available, using pkg-config"
          sudo apt-get install -y zlib1g-dev:armhf || echo "zlib1g-dev:armhf not available, using native"

        elif [ "${{ matrix.target.triple }}" = "aarch64-unknown-linux-gnu" ]; then
          # Install ARM64 cross-compilation toolchain
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          # Install cross-architecture packages (add architecture support if needed)
          sudo dpkg --add-architecture arm64 || true
          sudo apt-get update

          # Try to install cross-architecture packages, fallback if not available
          sudo apt-get install -y libssl-dev:arm64 || echo "libssl-dev:arm64 not available, using native"
          sudo apt-get install -y pkg-config-aarch64-linux-gnu || echo "pkg-config-aarch64-linux-gnu not available, using pkg-config"
          sudo apt-get install -y zlib1g-dev:arm64 || echo "zlib1g-dev:arm64 not available, using native"
        fi

        # Install additional dependencies for cross-compilation
        sudo apt-get install -y pkg-config build-essential

        # Install OpenSSL development libraries for native architecture as fallback
        sudo apt-get install -y libssl-dev zlib1g-dev

    - name: Build for target
      run: |
        # Set environment variables for cross-compilation
        if [ "${{ matrix.target.triple }}" = "armv7-unknown-linux-gnueabihf" ]; then
          # Try cross-architecture paths first, fallback to native
          if [ -d "/usr/lib/arm-linux-gnueabihf" ]; then
            export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig:$PKG_CONFIG_PATH
            export PKG_CONFIG_SYSROOT_DIR=/
            export ARMV7_UNKNOWN_LINUX_GNUEABIHF_OPENSSL_LIB_DIR=/usr/lib/arm-linux-gnueabihf
            export ARMV7_UNKNOWN_LINUX_GNUEABIHF_OPENSSL_INCLUDE_DIR=/usr/include
          fi
          export PKG_CONFIG_ALLOW_CROSS=1
          export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
        elif [ "${{ matrix.target.triple }}" = "aarch64-unknown-linux-gnu" ]; then
          # Try cross-architecture paths first, fallback to native
          if [ -d "/usr/lib/aarch64-linux-gnu" ]; then
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH
            export PKG_CONFIG_SYSROOT_DIR=/
            export AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu
            export AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_INCLUDE_DIR=/usr/include
          fi
          export PKG_CONFIG_ALLOW_CROSS=1
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --target ${{ matrix.target.triple }} --release --verbose

    - name: Create release artifacts
      run: |
        cd target/${{ matrix.target.triple }}/release
        tar -czf phaeton-${{ matrix.target.triple }}.tar.gz phaeton

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: phaeton-${{ matrix.target.triple }}
        path: target/${{ matrix.target.triple }}/release/phaeton-${{ matrix.target.triple }}.tar.gz
        retention-days: 30

  macos-build:
    name: macOS Build
    runs-on: macos-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build for macOS ARM64
      run: cargo build --release --verbose

    - name: Create release artifacts
      run: |
        cd target/release
        tar -czf phaeton-macos-arm64.tar.gz phaeton

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: phaeton-macos-arm64
        path: target/release/phaeton-macos-arm64.tar.gz
        retention-days: 30

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --no-deps

    - name: Check documentation
      run: cargo doc --document-private-items
