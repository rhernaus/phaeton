name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy linter
      run: cargo clippy -- -D warnings

    - name: Build project
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests with all features
      run: cargo test --all-features --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  cross-compilation:
    name: Cross-compilation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: armv7-unknown-linux-gnueabihf
            name: "Cerbo GX (ARM v7)"
            gcc_package: "gcc-arm-linux-gnueabihf"
            arch: "armhf"
          - target: aarch64-unknown-linux-gnu
            name: "Linux ARM64"
            gcc_package: "gcc-aarch64-linux-gnu"
            arch: "arm64"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cross-compilation tools
      run: |
        set -e  # Exit on any error

        echo "Installing cross-compilation tools for ${{ matrix.name }} (${{ matrix.target }})"

        # Update package lists
        sudo apt-get update

        # Install the cross-compiler (this should always be available)
        echo "Installing cross-compiler: ${{ matrix.gcc_package }}"
        sudo apt-get install -y ${{ matrix.gcc_package }}

        # Try to add the architecture - this might fail in some CI environments
        echo "Attempting to add architecture: ${{ matrix.arch }}"
        if sudo dpkg --add-architecture ${{ matrix.arch }} 2>/dev/null; then
          echo "Successfully added ${{ matrix.arch }} architecture"
          sudo apt-get update

          # Try to install cross-architecture packages (might not be available)
          echo "Attempting to install cross-architecture packages..."
          if sudo apt-get install -y libssl-dev:${{ matrix.arch }} 2>/dev/null; then
            echo "Successfully installed libssl-dev:${{ matrix.arch }}"
          else
            echo "libssl-dev:${{ matrix.arch }} not available, will use native libraries"
          fi

          if sudo apt-get install -y zlib1g-dev:${{ matrix.arch }} 2>/dev/null; then
            echo "Successfully installed zlib1g-dev:${{ matrix.arch }}"
          else
            echo "zlib1g-dev:${{ matrix.arch }} not available, will use native libraries"
          fi
        else
          echo "Could not add ${{ matrix.arch }} architecture, using native libraries"
        fi

        # Always install native development libraries as fallback
        echo "Installing native development libraries..."
        sudo apt-get install -y libssl-dev zlib1g-dev pkg-config build-essential

        echo "Cross-compilation tools installation completed"

    - name: Build for target
      run: |
        echo "Building for ${{ matrix.name }} (${{ matrix.target }})"

        # Set environment variables for cross-compilation
        export PKG_CONFIG_ALLOW_CROSS=1

        if [ "${{ matrix.target }}" = "armv7-unknown-linux-gnueabihf" ]; then
          export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc

          # Use cross-architecture libraries if available, otherwise use native
          if [ -d "/usr/lib/arm-linux-gnueabihf" ]; then
            export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig:/usr/lib/pkgconfig
            export PKG_CONFIG_SYSROOT_DIR=/
            export ARMV7_UNKNOWN_LINUX_GNUEABIHF_OPENSSL_LIB_DIR=/usr/lib/arm-linux-gnueabihf
            export ARMV7_UNKNOWN_LINUX_GNUEABIHF_OPENSSL_INCLUDE_DIR=/usr/include
            echo "Using cross-architecture libraries for ARM v7"
          else
            export PKG_CONFIG_PATH=/usr/lib/pkgconfig
            export ARMV7_UNKNOWN_LINUX_GNUEABIHF_OPENSSL_LIB_DIR=/usr/lib
            export ARMV7_UNKNOWN_LINUX_GNUEABIHF_OPENSSL_INCLUDE_DIR=/usr/include
            echo "Using native libraries for ARM v7 cross-compilation"
          fi

        elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc

          # Use cross-architecture libraries if available, otherwise use native
          if [ -d "/usr/lib/aarch64-linux-gnu" ]; then
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/pkgconfig
            export PKG_CONFIG_SYSROOT_DIR=/
            export AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu
            export AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_INCLUDE_DIR=/usr/include
            echo "Using cross-architecture libraries for ARM64"
          else
            export PKG_CONFIG_PATH=/usr/lib/pkgconfig
            export AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR=/usr/lib
            export AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_INCLUDE_DIR=/usr/include
            echo "Using native libraries for ARM64 cross-compilation"
          fi
        fi

        echo "Starting build..."
        cargo build --target ${{ matrix.target }} --release --verbose

    - name: Create release artifacts
      run: |
        echo "Creating release artifacts for ${{ matrix.name }}"
        cd target/${{ matrix.target }}/release
        tar -czf phaeton-${{ matrix.target }}.tar.gz phaeton
        echo "Created phaeton-${{ matrix.target }}.tar.gz"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: phaeton-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/phaeton-${{ matrix.target }}.tar.gz
        retention-days: 30

  macos-build:
    name: macOS Build
    runs-on: macos-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build for macOS ARM64
      run: cargo build --release --verbose

    - name: Create release artifacts
      run: |
        cd target/release
        tar -czf phaeton-macos-arm64.tar.gz phaeton

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: phaeton-macos-arm64
        path: target/release/phaeton-macos-arm64.tar.gz
        retention-days: 30

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --no-deps

    - name: Check documentation
      run: cargo doc --document-private-items
